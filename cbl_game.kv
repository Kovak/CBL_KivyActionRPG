#:kivy 1.3.0
#: import Animation kivy.animation.Animation
#: import Vector kivy.vector.Vector
#: import Window kivy.core.window
#: import Clock kivy.clock


<CBL_Collision_Widget>:
    size: root.size
    pos: root.pos
    self_prop: root
    canvas: 
        Color: 
            rgba: (1.0, .0, .0, .50) if self.was_collided else (1.0, .0, .0, .0)
        Rectangle:
            size: root.size
            pos: root.pos

<CBL_Enemy>:
    collision_widget: collision_widget.self_prop
    move_anim: Animation(pos = (root.target_pos[0], root.target_pos[1]), duration = (Vector(root.pos).distance(root.target_pos) / (root.unit_speed * 45))) if root.target_pos != [] else None   
    on_target_pos: 
        self.move_anim.bind(on_complete = self.stop_moving)
        self.move_anim.start(self) 
    canvas: 
        Color: 
            rgba: (.22, .22, 1.0, 1.0)
        Rectangle:
            size: root.size
            pos: root.pos

    CBL_Collision_Widget:
        id: collision_widget
        pos: root.pos
        size: (root.width, root.height)
        parent: root

<CBL_Animated_Sprite>:
    self_prop: root
    anim_frame: root.anim_frame
    anim_state: root.anim_state
    source_image: root.parent.source_image
    anim_states: root.parent.anim_states
    Image:
        source: root.source_image + root.anim_states[root.anim_state*3] + str(root.anim_frame)+'_png' if root.anim_states != [] else None
        size: root.size
        pos: (root.x - root.width/2., root.y) if root.anim_state == 2 or root.anim_state == 3 or root.anim_state == 7 or root.anim_state == 6 else root.pos

<CBL_Player_Character>:
    collision_widget: collision_widget.self_prop
    sprite_image: sprite_image.self_prop
    move_anim: Animation(pos = (root.target_pos[0], root.target_pos[1]), duration = (Vector(root.pos).distance(root.target_pos) / (root.unit_speed * 45))) if root.target_pos != [] else None   
    on_target_pos: 
        self.move_anim.bind(on_complete = self.sprite_image.stop_moving)
        self.move_anim.start(self)  
    CBL_Collision_Widget:
        id: collision_widget
        pos: root.pos
        size: (root.width*.5, root.height*.6)
        parent: root
    CBL_Animated_Sprite:
        id: sprite_image
        pos: root.pos
        size: root.size
        parent: root
    CBL_Player_Touch_Widget:
        pos: root.pos
        size: root.collision_widget.size
        parent: root



<CBL_Projectile_1>:
    collision_widget: collision_widget.self_prop
    duration: root.duration
    target_pos: []
     
    move_anim: Animation(pos = (self.target_pos[0], self.target_pos[1]), duration = (self.duration/self.unit_speed)) if root.target_pos != [] else None
    on_target_pos:
        self.move_anim.bind(on_complete = self.create_animation) 
        self.move_anim.start(self) 

    canvas:
        Color:
            rgb: (.3648, .5889, .234)
        Rectangle:
            pos: root.pos
            size: root.size
        Color:
            rgb: (.535,.231,.3242)
        Rectangle:
            pos: root.pos
            size: (root.width, root.height/5.)

    CBL_Collision_Widget:
        id: collision_widget
        pos: root.pos
        size: (root.width, root.height)
        parent: root


<CBL_Projectile>:
    collision_widget: collision_widget.self_prop
    distance: root.distance
    touch_up_pos: root.touch_up_pos
    direction: root.direction
    duration: root.duration
    
    target_pos: ((self.direction[0] * self.distance) + self.get_pos()[0], (self.direction[1] * self.distance) + self.get_pos()[1]) if root.touch_up_pos != [] else []
    move_anim: Animation(pos = (self.target_pos[0], self.target_pos[1]), duration = (self.duration)) if root.target_pos != [] else None
    on_target_pos:
        self.move_anim.bind(on_complete = self.del_self) if not self.has_fired else None
        self.move_anim.start(self) if not self.has_fired else None

    canvas:
        Color:
            rgb: (.3648, .5889, .234)
        Rectangle:
            pos: root.pos
            size: root.size
        Color:
            rgb: (1.,1.,1.)
        Rectangle:
            pos: root.pos
            size: (root.width, root.height/5.)

    CBL_Collision_Widget:
        id: collision_widget
        pos: root.pos
        size: (root.width, root.height)
        parent: root


<CBL_DebugPanel>
    fps: root.fps
    Label:
        text: 'FPS: ' + root.fps if root.fps != None else 'Click to\nStart FPS'
        on_touch_down:
            root.update(None)

<CBL_GameWorldScreen>:
    self_prop: root 
    canvas:
        Color: 
            rgba: (.42, .41, .85, .20)
        Rectangle:
            pos: root.pos
            size: root.size

<MainScreen>:
    input_widget: input_widget.self_prop
    BoxLayout:
        orientation: 'vertical'
        pos: root.x, root.y
        spacing: root.spacing
        size: ((root.button_width + root.spacing), (root.height))
        size_hint: (None, None)
        Button:
            text: 'Spawn'
            size_hint: (None, None)
            height: root.button_height
            width: root.button_width
            on_release: root.button_callback(*args)
        Button:
            text: 'Spawn Enemy'
            size_hint: (None, None)
            height: root.button_height
            width: root.button_width
            on_release: root.button_callback(*args)
        Button:
            text: 'Clear Target'
            size_hint: (None, None)
            height: root.button_height
            width: root.button_width
            on_release: root.button_callback(*args)
        Button:
            text: 'Spell 1'
            height: root.button_height
            width: root.button_width
            on_release: root.button_callback(*args)
            size_hint: (None, None)
        Button:
            text: 'Spell 2'
            height: root.button_height
            width: root.button_width
            on_release: root.button_callback(*args)
            size_hint: (None, None)
        CBL_DebugPanel
            height: root.button_height
            width: root.button_width
            size_hint: (None, None)

    CBL_GameWorldScreen:
        id: input_widget
        pos: root.x + root.button_width + root.spacing, root.y
        size: root.width - root.button_width - root.spacing, root.height
        parent: root
